---
- name: Setup Vprofile stack
  hosts: localhost
  connection: local
  gather_facts: False
  tasks:
    - name: Import VPC setup variable
      include_vars: vars/output_vars

    - name: Import Vprofile setup variable
      include_vars: vars/vprostacksetup

    - name: create vprofile ec2 key
      amazon.aws.ec2_key:
        name: vprokey
        region: "{{region}}"
      register: vprokey_out

    - name: Save private key info file 
      copy:
        content: "{{vprokey_out.key.private_key}}"
        dest: "./loginkey_vpro.pem"
        mode: 0600
      when: vprokey_out.changed

    - name: Create sg for load balancer
      ec2_group:
        name: vproELB-sg
        description: Allow port 80 eveywhere
        region: "{{region}}"
        vpc_id: "{{vpcid}}"
        rules:  
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
      register: vproELB_out

    - name: create sg for vprofile-sg
      ec2_group:
         name: vprostack-sg
         description: Allow port 22 everywhere
         region: "{{region}}"
         vpc_id: "{{vpcid}}"
         purge_rules: no
         rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            group_id: "{{vproELB_out.group_id}}"
          
          - proto: tcp
            from_port: 22
            to_port: 22
            group_id: "{{BastionSGid}}"
      register: vprostacksg_out

    - name: Update sg with its own sg id
      ec2_group:
        name: vprostack-sg
        description: Allow port 22 from everywhere
        region: "{{ region }}"
        vpc_id: "{{ vpcid }}"
        purge_rules: no
        rules:
          - proto: all
            group_id: "{{ vprostacksg_out.group_id }}"
    
    - name: Creating Nginx web01
      amazon.aws.ec2_instance:
        key_name: vprokey
        region: "{{ region }}"
        instance_type: t2.micro
        image_id: "{{ nginx_ami }}"
        wait: yes
        wait_timeout: 300
        tags: 
          Name: "web01"
          Project: Vprofileproject
        exact_count: 1
        security_groups: "{{ vprostacksg_out.group_id }}"  # Attach the security group here
        vpc_subnet_id: "{{ privsub1id }}"
      register: web01_out

    - name: Creating Tomcat app01
      amazon.aws.ec2_instance:
        key_name: vprokey
        region: "{{region}}"
        instance_type: t2.micro
        image_id: "{{tomcat_ami}}"
        wait: yes
        wait_timeout: 300
        tags: 
          Name: "app01"
          Project: vprofilepproject
        exact_count: 1
        security_groups: "{{ vprostacksg_out.group_id }}"  # Attach the security group here
        vpc_subnet_id: "{{privsub1id}}"
      register: app01_out
    
    - name: Creating Memcache mc01
      amazon.aws.ec2_instance:
        key_name: vprokey
        region: "{{region}}"
        instance_type: t2.micro
        image_id: "{{memcache_ami}}"
        wait: yes
        wait_timeout: 300
        tags: 
          Name: "mc01"
          Project: vprofilepproject
        exact_count: 1
        security_groups: "{{ vprostacksg_out.group_id }}"  # Attach the security group here
        vpc_subnet_id: "{{privsub1id}}"
      register: mc01_out

    - name: Creating Rabbitmq rmq01
      amazon.aws.ec2_instance:
        key_name: vprokey
        region: "{{region}}"
        instance_type: t2.micro
        image_id: "{{rmq_ami}}"
        wait: yes
        wait_timeout: 300
        tags: 
          Name: "rmq01"
          Project: vprofilepproject
        exact_count: 1
        security_groups: "{{ vprostacksg_out.group_id }}"  # Attach the security group here
        vpc_subnet_id: "{{privsub1id}}"
      register: rmq01_out

    - name: Creating Mysql db01
      amazon.aws.ec2_instance:
        key_name: vprokey
        region: "{{region}}"
        instance_type: t2.micro
        image_id: "{{mysql_ami}}"
        wait: yes
        wait_timeout: 300
        tags: 
          Name: "db01"
          Project: vprofilepproject
        exact_count: 1
        security_groups: "{{ vprostacksg_out.group_id }}"  # Attach the security group here
        vpc_subnet_id: "{{privsub1id}}"
      register: db01_out

    - debug:
        var: db01_out.instances[0].id
  
    - name: create ELB
      amazon.aws.elb:
        name: "vporfile-elb"
        region: "{{ region }}"
        state: present
        instances:
          - "{{ web01_out.instances[0].id }}"
        purge_instance_ids: true
        security_group_ids: "{{ vproELB_out.group_id }}"
        subnets:
          - "{{ pubsub1id }}"
          - "{{ pubsub2id }}"
          - "{{ pubsub3id }}"
        listeners:
          - protocol: http
            load_balancer_port: 80
            instance_port: 80
    - name: Insert/update Hosts IP & Name in file provision-stack/group_vars/hostip
      blockinfile: 
        path: provision-stack/group_vars/hostip
        block: |
          web01_ip: {{ web01_out.tagged_instances[0].private_ip }} 
          app01_ip: {{ app01_out.tagged_instances[0].private_ip }} 
          rmq01_ip: {{ rmq01_out.tagged_instances[0].private_ip }} 
          mc01_ip: {{ mc01_out.tagged_instances[0].private_ip }} 
          db01_ip: {{ db01_out.tagged_instances[0].private_ip }} 

    - name: Copy login key to provision_stack directory
      copy:
        src: loginkey_vpro.pem
        dest: provision-stack/loginkey_vpro.pem
        mode: '0400'
    
    - name: Insert/Update Inventory file provison-stack/inventory-vpro
      blockinfile:
        path: provision-stack/inventory-vpro
        block: |
          web01 ansible_host={{ web01_out.tagged_instances[0].private_ip }}
          app01 ansible_host={{ app01_out.tagged_instances[0].private_ip }}
          rmq01 ansible_host={{ rmq01_out.tagged_instances[0].private_ip }}
          mc01 ansible_host={{ mc01_out.tagged_instances[0].private_ip }}
          db01 ansible_host={{ db01_out.tagged_instances[0].private_ip }}
          cntl ansible_host=127.0.0.0 ansible_connection=local

          [websrvgrp]
          web01

          [appsrvgrp]
          app01

          [rmqsrvgrp]
          rmq01

          [mcsrvgrp]
          mc

          [dbsrvgrp]
          db01

          [control]
          cntl
       
          [stack_inst:children]
          websrvgrp
          appsrvgrp
          rmqsrvgrp
          mcsrvgrp
          dbsrvgrp

          [stack_inst:vars]
          ansible_user=ubuntu
          ansible_ssh_private_key_file=loginkey_vpro.pem





    