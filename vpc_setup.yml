- hosts: localhost
  connection: local
  gather_facts: False
  tasks:
    - name: Import vPC variables
      include_vars: vars/vpc_setup

    - name: Import Bastion setup variables
      include_vars: vars/bastion_setup.yml

    - name: Create Vprofile vPC
      ec2_vpc_net:
        name: "{{vpc_name}}"
        cidr_block: "{{vpccidr}}"
        region: "{{region}}"
        dns_support: yes
        dns_hostnames: yes
        tenancy: default
        state: "{{state}}"
      register: vpcout

    # - debug:
    #     var: vpcout
    
    - name: create Public Subnet 1 in zone1
      ec2_vpc_subnet:
          vpc_id: "{{vpcout.vpc.id}}"
          region: "{{region}}"
          az: "{{zone1}}"
          state: "{{state}}"
          cidr: "{{PubSub1Cidr}}"
          map_public: yes
          resource_tags:
            Name: vprofile-pubsub1
      register: pubsub1_out

    - name: create Public Subnet 2 in zone2
      ec2_vpc_subnet:
          vpc_id: "{{vpcout.vpc.id}}"
          region: "{{region}}"
          az: "{{zone2}}"
          state: "{{state}}"
          cidr: "{{PubSub2Cidr}}"
          map_public: yes
          resource_tags:
            Name: vprofile-pubsub2
      register: pubsub2_out

    - name: create Public Subnet 3 in zone3
      ec2_vpc_subnet:
          vpc_id: "{{vpcout.vpc.id}}"
          region: "{{region}}"
          az: "{{zone3}}"
          state: "{{state}}"
          cidr: "{{PubSub3Cidr}}"
          map_public: yes
          resource_tags:
            Name: vprofile-pubsub3
      register: pubsub3_out

    - name: create Private Subnet 1 in zone1
      ec2_vpc_subnet:
          vpc_id: "{{vpcout.vpc.id}}"
          region: "{{region}}"
          az: "{{zone1}}"
          state: "{{state}}"
          cidr: "{{PrivSub1Cidr}}"
          map_public: yes
          resource_tags:
            Name: vprofile-privsub1
      register: privsub1_out

    - name: create Private Subnet 2 in zone2
      ec2_vpc_subnet:
          vpc_id: "{{vpcout.vpc.id}}"
          region: "{{region}}"
          az: "{{zone2}}"
          state: "{{state}}"
          cidr: "{{PrivSub2Cidr}}"
          map_public: yes
          resource_tags:
            Name: vprofile-privsub2
      register: privsub2_out

    - name: create Private Subnet 3 in zone3
      ec2_vpc_subnet:
          vpc_id: "{{vpcout.vpc.id}}"
          region: "{{region}}"
          az: "{{zone3}}"
          state: "{{state}}"
          cidr: "{{PrivSub3Cidr}}"
          map_public: yes
          resource_tags:
            Name: vprofile-privsub3
      register: privsub3_out

    - name: Internet Gateway setup
      ec2_vpc_igw:
        vpc_id: "{{vpcout.vpc.id}}"
        region: "{{region}}"
        state: "{{state}}"
        resource_tags:
          Name: vprofile-igw
      register: igw_out

    - name: setup public subnet route table
      ec2_vpc_route_table:
        vpc_id: "{{vpcout.vpc.id}}"
        region: "{{region}}"
        tags:
          Name: public-subnet-RT
        subnets:
          - "{{pubsub1_out.subnet.id}}"
          - "{{pubsub2_out.subnet.id}}"
          - "{{pubsub3_out.subnet.id}}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{igw_out.gateway_id}}"
      register: pubRT_out

    - name: create a new nat Gateway and allocate a EIP
      ec2_vpc_nat_gateway:
        state: "{{state}}"
        subnet_id: "{{pubsub1_out.subnet.id}}" 
        wait: true
        region: "{{region}}"
        if_exist_do_not_create: true
      register: new_nat_gateway_out

    - name: Set up Private subnet route table
      ec2_vpc_route_table:
        vpc_id: "{{vpcout.vpc.id}}"
        region: "{{region}}"
        tags: 
          Name: Vprofile-privRT
        subnets: 
          - "{{ privsub1_out.subnet.id }}"
          - "{{ privsub2_out.subnet.id }}"
          - "{{ privsub3_out.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{new_nat_gateway_out.nat_gateway_id}}"
      register: private_RT_out
  
    - debug:
        var: "{{item}}"
      loop:
        - vpcout.vpc.id
        - pubsub1_out.subnet.id
        - pubsub2_out.subnet.id
        - pubsub3_out.subnet.id
        - privsub1_out.subnet.id
        - privsub2_out.subnet.id
        - privsub3_out.subnet.id
        - igw_out.gateway_id
        - pubRT_out.route_table.id
        - new_nat_gateway_out.nat_gateway_id
        - private_RT_out.route_table.id
    - set_fact:
        vpcid: "{{vpcout.vpc.id}}"
        pubsub1id: "{{pubsub1_out.subnet.id}}"
        pubsub2id: "{{pubsub2_out.subnet.id}}"
        pubsub3id: "{{pubsub3_out.subnet.id}}"
        privsub1id: "{{privsub1_out.subnet.id}}"
        privsub2id: "{{privsub2_out.subnet.id}}"
        privsub3id: "{{privsub3_out.subnet.id}}"
        igwid: "{{igw_out.gateway_id}}"
        pubRTid: "{{pubRT_out.route_table.id}}"
        NATWid: "{{new_nat_gateway_out.nat_gateway_id}}"
        privRTid: "{{private_RT_out.route_table.id}}"
        cacheable: yes

    - name: Create variables file for vpc output
      copy:
        content: " vpcid: {{vpcout.vpc.id}} \n pubsub1id: {{pubsub1_out.subnet.id}} \n pubsub2id: {{pubsub2_out.subnet.id}} \n pubsub3id: {{pubsub3_out.subnet.id}} \nprivsub1id: {{privsub1_out.subnet.id}} \nprivsub2id: {{privsub2_out.subnet.id}} \n privsub3id: {{privsub3_out.subnet.id}} \nigwid: {{igw_out.gateway_id}} \n pubRTid: {{pubRT_out.route_table.id}} \nNATWid: {{new_nat_gateway_out.nat_gateway_id}} \nprivRTid: {{private_RT_out.route_table.id}} "
        dest: vars/output_vars
        
    - name: Create vprofile ec2-key
      ec2_key:
        name: vprofile-key
        region: "{{ region }}"
      register: key_out

    - name: save private key into bastion-key.pem
      copy:
        content: "{{ key_out.key.private_key }}"
        dest: "./bastion-key.pem"
        mode: 0600
      when: key_out.changed

    - name: Create SG for bastion Host\n
      ec2_group:
        name: bastion-host-sg
        description: Allow port 22 from everywhere and all port within sg
        region: "{{ region }}"
        vpc_id: "{{ vpcid }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: "{{ MYIP }}"
        register: bastionSG_out

    - name: Capture bastion SG ID
      set_fact:
        bastionSG_id: "{{ lookup('aws_ec2', 'group-id', 'group-name=bastion-host-sg', 'region=' + region) }}"

    # - name: Creating Bastion Host
    #   ec2:
    #     key_name: vprofile-key
    #     region: "{{region}}"
    #     instance_type: t2.micro
    #     image: "{{ bastion_ami }}"
    #     wait: yes
    #     wait_timeout: 300
    #     instance_tags: 
    #       Name: "bastion-Host"
    #       Project: Vprofile
    #     exact_count: 1
    #     count_tag:
    #       Name: "bastion-Host"
    #       Project: Vprofile
    #     group_id: "{{bastionSG_out.group_id}}"
    #     vpc_subnet_id: "{{pubsub1id}}"
    #   register: bastionhost_out       